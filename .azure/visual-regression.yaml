trigger: none

pr:
  autoCancel: true
  branches:
    include:
      - main

parameters:
  - name: vmImage
    type: string
    default: "ubuntu-24.04"
  - name: services
    type: object
    default:
      - name: "design-system-websites"
        imageName: "design-system-websites"
  - name: autoReleaseCommitMessagePrefix
    default: "chore(auto-release):"

variables:
  - name: isDefaultBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  - template: pipeline-variables/shared-services.yaml
  - name: developmentOverlaysPath
    value: websites/overlays/non-prod-02/dev
  - name: productionOverlaysPath
    value: websites/overlays/prod-02/prod

resources:
  repositories:
    - repository: pipeline-templates
      type: github
      endpoint: ogcio
      name: ogcio/building-blocks-pipelines
      ref: main
    - repository: design-system-k8s-apps
      type: github
      endpoint: ogcio
      name: ogcio/design-system-k8s-apps
      ref: main

stages:
  - stage: setup
    displayName: Setup Dependencies
    dependsOn: []
    jobs:
      - job: SetupDependencies
        displayName: Setup pnpm and Install Dependencies
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates

  - stage: Chromatic_HTML
    displayName: Chromatic for HTML Library
    dependsOn: setup
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - job: Chromatic_Deploy
        displayName: "Build and Upload Chromatic"
        steps:
          - checkout: self
            displayName: "Get Full Git History"
            fetchDepth: 0

          - template: tools/install-pnpm.yml@pipeline-templates

          - script: |
              pnpm build:libs
              pnpm html:storybook:build
            displayName: "Build Storybook for HTML Library"

          - task: CmdLine@2
            displayName: "Run Chromatic"
            inputs:
              script: npx chromatic --config-file packages/html/ds/chromatic.config.json
            env:
              CHROMATIC_PROJECT_TOKEN: $(CHROMATIC_PROJECT_TOKEN_HTML)

  - stage: Chromatic_React
    displayName: Chromatic for React Library
    dependsOn: setup
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - job: Chromatic_Deploy
        displayName: "Build and Upload Chromatic"
        steps:
          - checkout: self
            displayName: "Get Full Git History"
            fetchDepth: 0

          - template: tools/install-pnpm.yml@pipeline-templates

          - script: |
              pnpm build:libs
              pnpm react:storybook:build
            displayName: "Build Storybook for React Library"

          - task: CmdLine@2
            displayName: "Run Chromatic"
            inputs:
              script: npx chromatic --config-file packages/react/ds/chromatic.config.json
            env:
              CHROMATIC_PROJECT_TOKEN: $(CHROMATIC_PROJECT_TOKEN_REACT)

  - stage: Playwright
    displayName: Playwright for React Library
    dependsOn: setup
    jobs:
      - job: Playwright_Test
        displayName: "Run Playwright Tests"
        pool:
          vmImage: ${{ parameters.vmImage }}
        container: mcr.microsoft.com/playwright:v1.55.0-noble
        strategy:
          matrix:
            chromium-1:
              matrixName: chromium-1
              project: chromium
              shard: 1/4
            chromium-2:
              matrixName: chromium-2
              project: chromium
              shard: 2/4
            chromium-3:
              matrixName: chromium-3
              project: chromium
              shard: 3/4
            chromium-4:
              matrixName: chromium-4
              project: chromium
              shard: 4/4
            firefox-1:
              matrixName: firefox-1
              project: firefox
              shard: 1/4
            firefox-2:
              matrixName: firefox-2
              project: firefox
              shard: 2/4
            firefox-3:
              matrixName: firefox-3
              project: firefox
              shard: 3/4
            firefox-4:
              matrixName: firefox-4
              project: firefox
              shard: 4/4
            webkit-1:
              matrixName: webkit-1
              project: webkit
              shard: 1/4
            webkit-2:
              matrixName: webkit-2
              project: webkit
              shard: 2/4
            webkit-3:
              matrixName: webkit-3
              project: webkit
              shard: 3/4
            webkit-4:
              matrixName: webkit-4
              project: webkit
              shard: 4/4
            android-1:
              matrixName: android-1
              project: android
              shard: 1/4
            android-2:
              matrixName: android-2
              project: android
              shard: 2/4
            android-3:
              matrixName: android-3
              project: android
              shard: 3/4
            android-4:
              matrixName: android-4
              project: android
              shard: 4/4
            iphone-1:
              matrixName: iphone-1
              project: iphone
              shard: 1/4
            iphone-2:
              matrixName: iphone-2
              project: iphone
              shard: 2/4
            iphone-3:
              matrixName: iphone-3
              project: iphone
              shard: 3/4
            iphone-4:
              matrixName: iphone-4
              project: iphone
              shard: 4/4
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates

          - script: |
              pnpm build:libs
              pnpm react:storybook:build
            displayName: "Build Storybook for React Library"

          - script: |
              cd packages/react/ds
              pnpm playwright test --project=$(project) --shard=$(shard)
            displayName: "Run Tests"
            # pnpm --filter "@ogcio/design-system-react" playwright:test
            env:
              CI: "true"

          - task: PublishTestResults@2
            displayName: "Publish test results"
            inputs:
              searchFolder: "$(System.DefaultWorkingDirectory)/packages/react/ds/test-results"
              testResultsFormat: "JUnit"
              testResultsFiles: "results.xml"
              testRunTitle: "Playwright Tests"
            condition: succeededOrFailed()

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/packages/react/ds/test-results"
              artifact: $(matrixName)
              publishLocation: "pipeline"
            condition: succeededOrFailed()
