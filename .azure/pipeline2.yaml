trigger:
  batch: true
  branches:
    include:
      - main

pr:
  autoCancel: true
  branches:
    include:
      - "*"

parameters:
  - name: vmImage
    type: string
    default: "ubuntu-24.04"
  - name: environments
    type: object
    default:
      - alias: dev
        fullName: non-prod-02/dev
      - alias: prod
        fullName: centralhub-02/prod
  - name: services
    type: object
    default:
      - name: "auth-proxy"
        imageName: "o11y/auth-proxy"
        overlaysPath: alloy/overlays
      - name: "kuma-setup"
        imageName: "o11y/kuma-setup"
        overlaysPath: uptime-kuma/overlays

variables:
  - name: isDefaultBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  - template: pipeline-variables/shared-services.yaml

resources:
  repositories:
    - repository: pipeline-templates
      type: github
      endpoint: ogcio
      name: ogcio/building-blocks-pipelines
      ref: main
    - repository: o11y-k8s-apps
      type: github
      endpoint: ogcio
      name: ogcio/o11y-k8s-apps
      ref: main

stages:
  - stage: setup
    displayName: Setup Dependencies
    dependsOn: []
    jobs:
      - job: SetupDependencies
        displayName: Setup pnpm and Install Dependencies
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates

  - stage: securityScan
    displayName: Security Scans
    dependsOn: []
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - template: security/gitleaks.yml@pipeline-templates
      - job:
        displayName: Checkmarx KICS
        pool:
          vmImage: ${{ parameters.vmImage }}
        container: checkmarx/kics:debian
        steps:
          - script: /app/bin/kics scan -p ${PWD} -o ${PWD} --report-formats "json,JUnit" --output-name kics-result --ci --fail-on 'critical,high' --config ./kics-config.json
            displayName: KICS Scan
          - script: cat kics-result.json
            condition: succeededOrFailed()
            displayName: KICS Results
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "$(System.DefaultWorkingDirectory)/junit-kics-result.xml"

  - stage: lintingAndFormatting
    displayName: Linting and Formatting Checks
    dependsOn: setup
    jobs:
      - job: LintAndFormat
        displayName: Run Linting and Formatting
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run check:linting
              pnpm run check:formatting
            displayName: "Run Linting and Formatting"

  - stage: checksCompleted
    displayName: Checks Completed
    dependsOn:
      - lintingAndFormatting
      - securityScan
    jobs:
      - job: ChecksCompleted
        steps:
          - script: echo "All checks completed"

  - ${{ each service in parameters.services }}:
      - stage: Build_${{ replace(service.name, '-', '_') }}
        dependsOn: ChecksCompleted
        displayName: Build ${{ service.name }}
        pool:
          vmImage: ${{ parameters.vmImage }}
        jobs:
          - template: build/build_service.yml@pipeline-templates
            parameters:
              serviceName: ${{ service.name }}
              pushArtefacts: true
              dockerfile: ${{ service.name }}/Dockerfile
      - stage: Scan_${{ replace(service.name, '-', '_') }}
        displayName: Scan ${{ service.name }}
        pool:
          vmImage: ${{ parameters.vmImage }}
        dependsOn:
          - Build_${{ replace(service.name, '-', '_') }}
        jobs:
          - template: security/trivy.yml@pipeline-templates
            parameters:
              pullDockerImageFromArtifact: true
              awsServiceConnection: ${{ variables.awsServiceConnection }}
              dockerImageName: ${{ service.name }}
              dockerImageTag: $(Build.BuildId)
              trivyIgnoreFilePath: .trivyignore
      - stage: Push_${{ replace(service.name, '-', '_') }}
        displayName: Push ${{ service.name }} to ECR
        pool:
          vmImage: ${{ parameters.vmImage }}
        dependsOn:
          - Scan_${{ replace(service.name, '-', '_') }}
        condition: and(${{ eq(variables.isDefaultBranch, 'true') }}, succeeded())
        jobs:
          - template: build/push_image_ecr.yml@pipeline-templates
            parameters:
              awsServiceConnection: ${{ variables.awsServiceConnection }}
              awsRegion: ${{ variables.awsRegion }}
              serviceName: ${{ service.name }}
              repositoryName: ${{ service.imageName }}
              pushTag: $(Build.BuildId)

  - ${{ if eq(variables.isDefaultBranch, 'true') }}:
      - ${{ each environment in parameters.environments }}:
          - stage: ApprovalGate_${{ environment.alias }}
            dependsOn:
              - checkTestAndBuildSdkCompleted
            displayName: ${{ upper(environment.alias) }} - Approval Gate
            jobs:
              - deployment: VerifyDeployment
                displayName: Verify conditions for deployment
                environment: o11y-${{ environment.alias }}
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - download: none
                        - script: |
                            date
                          displayName: Show current date
          - stage: Deployment_${{ environment.alias }}
            dependsOn:
              - ApprovalGate_${{ environment.alias }}
            displayName: ${{ upper(environment.alias) }} - Gitops Deployment
            jobs:
              - template: deploy/openshift-gitops.yml@pipeline-templates
                parameters:
                  manifestsRepositoryName: o11y-k8s-apps
                  tag: $(Build.BuildId)
                  services:
                    - ${{ each service in parameters.services }}:
                        - name: ${{ service.name }}
                          image: ${{ variables.awsEcrRepository }}/${{ service.imageName }}
                          overlaysPath: ${{ service.overlaysPath }}/${{ environment.fullName }}

  # Build O11y SDK Node
  - stage: buildO11ySdkNode
    displayName: Build O11y SDK Node
    dependsOn: ChecksCompleted
    jobs:
      - job: BuildSdk
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run --filter "@ogcio/o11y-sdk-node" build
            displayName: "Build O11y SDK Node"

  - stage: testO11ySdkNode
    displayName: Testing O11y SDK Node
    dependsOn: buildO11ySdkNode
    jobs:
      - job: RunTests
        displayName: Run Tests
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - task: Bash@3
            inputs:
              targetType: "filePath"
              filePath: "$(System.DefaultWorkingDirectory)/packages/sdk-node/test/integration/run.sh"
              arguments: $(Build.BuildId) $(System.DefaultWorkingDirectory)
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run --filter o11y-sdk-node --fail-if-no-match test
            displayName: "Run O11y SDK Node Tests"
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(System.DefaultWorkingDirectory)/packages/sdk-node/test-report.xml"
              testRunTitle: "Observability Node SDK Tests Report"
              mergeTestResults: true
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/packages/sdk-node/coverage/cobertura-coverage.xml
              artifactName: sdk-node.cobertura-coverage.xml

  # Build O11y SDK React
  - stage: buildO11ySdkReact
    displayName: Build O11y SDK React
    dependsOn: ChecksCompleted
    jobs:
      - job: BuildSdk
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run --filter "@ogcio/o11y-sdk-react" build
            displayName: "Build O11y SDK React"

  - stage: testO11ySdkReact
    displayName: Testing O11y SDK React
    dependsOn: buildO11ySdkReact
    jobs:
      - job: RunTests
        displayName: Run Tests
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run --filter o11y-sdk-react --fail-if-no-match test
            displayName: "Run O11y SDK React Tests"
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(System.DefaultWorkingDirectory)/packages/sdk-react/test-report.xml"
              testRunTitle: "Observability React SDK Tests Report"
              mergeTestResults: true
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/packages/sdk-react/coverage/cobertura-coverage.xml
              artifactName: sdk-react.cobertura-coverage.xml

  - stage: testO11yInfra
    displayName: Testing O11y Infrastructure
    dependsOn: ChecksCompleted
    jobs:
      - job: RunTests
        displayName: Run Tests
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - task: Bash@3
            inputs:
              targetType: "filePath"
              filePath: "$(System.DefaultWorkingDirectory)/integration-tests/infra-manager.sh"
              arguments: up $(Build.BuildId)
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run test:e2e:install
            displayName: "Install Playwright Dependencies"
          - script: |
              pnpm run test:e2e
            env:
              CI: "true"
            displayName: "Run O11y Infra E2E Tests"
          - task: Bash@3
            condition: succeededOrFailed()
            inputs:
              targetType: "filePath"
              filePath: "$(System.DefaultWorkingDirectory)/integration-tests/infra-manager.sh"
              arguments: down $(Build.BuildId)
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(System.DefaultWorkingDirectory)/integration-test-report.xml"
              testRunTitle: "Observability Infra Tests Report"
              mergeTestResults: true

    # SDK Build Approval Gateways

  - stage: testO11yScripts
    displayName: Testing O11y Scripts
    dependsOn: setup
    jobs:
      - job: RunTests
        displayName: Run Tests
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run test:scripts:ci
            displayName: "Run O11y Bats Tests"
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(System.DefaultWorkingDirectory)/scripts/report.xml"
              testRunTitle: "Observability Script Utils Tests Report"
              mergeTestResults: true

  - stage: checkTestAndBuildSdkCompleted
    displayName: Check Build, Tests and Push Completion
    dependsOn:
      - ${{ each service in parameters.services }}:
          - Push_${{ replace(service.name, '-', '_') }}
      - testO11ySdkNode
      - testO11ySdkReact
      - testO11yInfra
      - testO11yScripts
    jobs:
      - job: checkBuildSdkCompleted
        steps:
          - script: echo "All Build, Tests and Push completed successfully"

  - stage: retrieveCredentials
    displayName: Retrieve credentials from AWS Secrets Manager
    dependsOn: checkTestAndBuildSdkCompleted
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - job: readCredentials
        displayName: GitHub credentials
        steps:
          - checkout: none
          - task: AWSShellScript@1
            name: setGithubToken
            displayName: Retrieve GitHub credentials
            inputs:
              awsCredentials: ${{ variables.secretsManagerAwsConnection }}
              regionName: ${{ variables.awsRegion }}
              scriptType: "inline"
              inlineScript: |
                export GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.githubSecret }} | jq --raw-output '.SecretString' | jq -r .GITHUB_TOKEN)
                echo "##vso[task.setvariable variable=githubTokenADO;issecret=true;isoutput=true;]$GITHUB_TOKEN"
          - task: AWSShellScript@1
            name: setNPMjsToken
            displayName: Retrieve NPM credentials
            inputs:
              awsCredentials: ${{ variables.secretsManagerAwsConnection }}
              regionName: ${{ variables.awsRegion }}
              scriptType: "inline"
              inlineScript: |
                export TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.npmjsSecret }} | jq --raw-output '.SecretString' | jq -r .TOKEN)
                echo "##vso[task.setvariable variable=npmjsTokenADO;issecret=true;isoutput=true;]$TOKEN"

  - stage: releaseSdkNode
    displayName: Release Sdk Node Management
    dependsOn: retrieveCredentials
    jobs:
      - job: HandleRelease
        variables:
          - name: githubTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setGithubToken.githubTokenADO']]
          - name: npmjsTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setNPMjsToken.npmjsTokenADO']]
        displayName: Handle Release Process
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: release/release-please.yml@pipeline-templates
            parameters:
              npmToken: $(npmjsTokenADO)
              githubToken: $(githubTokenADO)
              repoUrl: "https://github.com/ogcio/o11y"
              packageName: "@ogcio/o11y-sdk-node"

  - stage: releaseSdkReact
    displayName: Release Sdk React Management
    dependsOn: retrieveCredentials
    jobs:
      - job: HandleRelease
        variables:
          - name: githubTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setGithubToken.githubTokenADO']]
          - name: npmjsTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setNPMjsToken.npmjsTokenADO']]
        displayName: Handle Release Process
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: release/release-please.yml@pipeline-templates
            parameters:
              npmToken: $(npmjsTokenADO)
              githubToken: $(githubTokenADO)
              repoUrl: "https://github.com/ogcio/o11y"
              packageName: "@ogcio/o11y-sdk-react"

  # Publish all tests coverage
  - stage: publishTestCoverage
    displayName: Publish Test Coverage
    condition: succeededOrFailed()
    dependsOn:
      - checkTestAndBuildSdkCompleted
    jobs:
      - job: PublishCoverage
        displayName: Publish Coverage Results
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              targetPath: $(Build.SourcesDirectory)/coverage
          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: "$(Build.SourcesDirectory)/coverage/**"
