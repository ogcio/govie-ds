trigger: none

parameters:
  - name: vmImage
    type: string
    default: "ubuntu-24.04"

variables:
  - name: isDefaultBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  - template: pipeline-variables/shared-services.yaml

stages:
  - ${{ if eq(variables.isDefaultBranch, 'true') }}:
      - stage: retrieveCredentials
        displayName: Retrieve credentials from AWS Secrets Manager
        pool:
          vmImage: ${{ parameters.vmImage }}
        jobs:
          - job: readCredentials
            displayName: GitHub credentials
            steps:
              - checkout: none
              - task: AWSShellScript@1
                name: setGithubToken
                displayName: Retrieve GitHub credentials
                inputs:
                  awsCredentials: ${{ variables.secretsManagerAwsConnection }}
                  regionName: ${{ variables.awsRegion }}
                  scriptType: "inline"
                  inlineScript: |
                    export GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.githubSecret }} | jq --raw-output '.SecretString' | jq -r .GITHUB_TOKEN)
                    echo "##vso[task.setvariable variable=githubTokenADO;issecret=true;isoutput=true;]$GITHUB_TOKEN"
              - task: AWSShellScript@1
                name: setNPMjsToken
                displayName: Retrieve NPM credentials
                inputs:
                  awsCredentials: ${{ variables.secretsManagerAwsConnection }}
                  regionName: ${{ variables.awsRegion }}
                  scriptType: "inline"
                  inlineScript: |
                    export TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.npmjsSecret }} | jq --raw-output '.SecretString' | jq -r .TOKEN)
                    echo "##vso[task.setvariable variable=npmjsTokenADO;issecret=true;isoutput=true;]$TOKEN"

      - stage: azureDevopsUpdate
        displayName: Azure DevOps Wiki Update
        dependsOn: retrieveCredentials
        jobs:
          - job: UpdateAzureDevops
            displayName: Update Azure DevOps Wiki with Tickets
            pool:
              vmImage: ${{ parameters.vmImage }}
            steps:
              - checkout: self
                persistCredentials: true
                displayName: Checkout code

              - bash: |
                  set -euo pipefail

                  current_date=$(date +"%Y-%m-%d")
                  release_page_path="/Release%20Notes/Design%20System/$current_date"
                  project_wiki_base_url="$AZURE_DEVOPS_BASE_URL/Digital%20Services%20Programme/_apis/wiki/wikis/Digital-Services-Programme.wiki"
                  existing_release_page_http_code=$(curl --output /dev/null --silent --write-out "%{http_code}\n" --request GET --location "$project_wiki_base_url/pages?path=$release_page_path&api-version=7.2-preview.1" --header 'Accept: application/json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN")
                  escaped_pipeline_url=${PIPELINE_URL//' '/'%20'}

                  template_wiki_page_content=''
                  if [ "$existing_release_page_http_code" -eq 404 ]; then
                    echo 'Fetching release notes template page...'
                    template_wiki_page_content=$(curl --silent --request GET --location "$project_wiki_base_url/pages/4136?includeContent=true&api-version=7.2-preview.1" --header 'Accept: application/json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" | jq '.content')
                  else
                    echo 'Fetching existing release notes page...'
                    template_wiki_page_content=$(curl --silent --request GET --location "$project_wiki_base_url/pages?path=$release_page_path&includeContent=true&api-version=7.2-preview.1" --header 'Accept: application/json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" | jq '.content')
                  fi

                  echo 'Extracting tickets list...'
                  release_tickets_list=$(git log latest-release..HEAD --oneline | grep -o -E '[Aa][Bb]#[0-9]+' | sed 's/[Aa][Bb]#/- #/' | sort | uniq)

                  echo 'Extracted tickets:'
                  echo "$release_tickets_list"

                  echo 'Deleting existing Wiki page...'
                  curl --request DELETE --silent --location "$project_wiki_base_url/pages?path=$release_page_path&api-version=7.2-preview.1" --header 'Accept: application/json' --header 'Content-Type: application/json'  --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN"

                  echo 'Creating release notes Wiki page...'

                  release_wiki_page_content=${release_wiki_page_content//'[app_release_pipeline_run_placeholder]'/$escaped_pipeline_url}
                  curl --request PUT --silent --location "$project_wiki_base_url/pages?path=$release_page_path&api-version=7.2-preview.1" --header 'Accept: application/json' --header 'Content-Type: application/json'  --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" --data "{\"content\":$release_wiki_page_content}"

                  release_tickets_list="${release_tickets_list//$'\n'/\\n}"
                  release_wiki_page_content=${template_wiki_page_content//'[app_tickets_list_placeholder]'/$release_tickets_list}

                  release_page_update_response=$(curl --silent --request PUT --location "$project_wiki_base_url/pages?path=$release_page_path&api-version=7.2-preview.1" --header 'Accept: application/json' --header 'Content-Type: application/json' --header "If-Match: $release_wiki_page_version" --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" --data "{\"content\":$release_wiki_page_content}" | jq)
                  release_page_url=$(echo "$release_page_update_response" | jq -r '.remoteUrl')
                  echo "Release notes Wiki page URL: $release_page_url"
                displayName: Create Wiki Page
                env:
                  AZURE_DEVOPS_API_USERNAME: $(ADO_API_USERNAME)
                  AZURE_DEVOPS_API_TOKEN: $(ADO_API_TOKEN)
                  AZURE_DEVOPS_BASE_URL: $(ADO_BASE_URL)
                  PIPELINE_URL: "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"

              - bash: |
                  set -euo pipefail

                  AZURE_DEVOPS_TICKETS_AREA_PATH='Digital Services Programme\\Design System'
                  AZURE_DEVOPS_TICKETS_READY_TO_RELEASE_STATE='Ready to Release'
                  AZURE_DEVOPS_TICKETS_READY_TO_CLOSED_STATE='Closed'

                  ready_to_release_tickets_query="SELECT [System.Id] FROM workitems WHERE [System.AreaPath] = '$AZURE_DEVOPS_TICKETS_AREA_PATH' AND [System.State] = '$AZURE_DEVOPS_TICKETS_READY_TO_RELEASE_STATE'"
                  ready_to_release_tickets_query_payload="{\"query\":\"$ready_to_release_tickets_query\"}"
                  ready_to_release_tickets_ids=$(curl --silent --request POST --location "$AZURE_DEVOPS_BASE_URL/_apis/wit/wiql?api-version=7.2-preview.2" --header 'Accept: application/json' --header 'Content-Type: application/json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" --data "$ready_to_release_tickets_query_payload" | jq -r '.workItems | map(.id) | join(",")')
                  IFS=',' read -ra ready_to_release_tickets_ids_array <<< "$ready_to_release_tickets_ids"

                  current_date=$(date +"%Y-%m-%d")

                  for ticket_id in "${ready_to_release_tickets_ids_array[@]}"
                  do
                      echo "Moving ticket with ID $ticket_id from $AZURE_DEVOPS_TICKETS_READY_TO_RELEASE_STATE to $AZURE_DEVOPS_TICKETS_READY_TO_CLOSED_STATE"
                      update_ticket_payload="[{\"op\": \"add\",\"path\": \"/fields/System.State\",\"value\": \"$AZURE_DEVOPS_TICKETS_READY_TO_CLOSED_STATE\"},{\"op\": \"add\",\"path\": \"/fields/System.Reason\",\"value\": \"Released to PROD on $current_date\"}]"
                      curl --silent --request PATCH --location "$AZURE_DEVOPS_BASE_URL/Digital%20Services%20Programme/_apis/wit/workitems/${ticket_id}?api-version=7.2-preview.3" --header 'Accept: application/json' --header 'Content-Type: application/json-patch+json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" --data "$update_ticket_payload"
                      echo ''
                      echo '---------------------------'
                  done
                displayName: Close released tickets
                env:
                  AZURE_DEVOPS_API_USERNAME: $(ADO_API_USERNAME)
                  AZURE_DEVOPS_API_TOKEN: $(ADO_API_TOKEN)
                  AZURE_DEVOPS_BASE_URL: $(ADO_BASE_URL)

              - bash: |
                  git tag -d latest-release
                  git push origin :refs/tags/latest-release
                  git tag latest-release
                  git push origin latest-release
                displayName: Move latest-release tag to current commit
