trigger:
  batch: true
  branches:
    include:
      - main

pr:
  branches:
    exclude:
      - "*"

parameters:
  - name: vmImage
    type: string
    default: "ubuntu-22.04"
  - name: services
    type: object
    default:
      - name: "design-system-websites"
        imageName: "design-system-websites"
        environment: "dev"
        overlaysPath: websites/overlays/non-prod-02

variables:
  - name: isDefaultBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  - template: pipeline-variables/shared-services.yaml

resources:
  repositories:
    - repository: pipeline-templates
      type: github
      endpoint: ogcio
      name: ogcio/building-blocks-pipelines
      ref: main
    - repository: design-system-k8s-apps
      type: github
      endpoint: ogcio
      name: ogcio/design-system-k8s-apps
      ref: main

stages:
  - stage: setup
    displayName: Setup Dependencies
    dependsOn: []
    jobs:
      - job: SetupDependencies
        displayName: Setup pnpm and Install Dependencies
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates

  - stage: securityScan
    displayName: Security Scans
    dependsOn: []
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - template: security/gitleaks.yml@pipeline-templates
      - job:
        displayName: Checkmarx KICS
        pool:
          vmImage: ${{ parameters.vmImage }}
        container: checkmarx/kics:debian
        steps:
          - script: /app/bin/kics scan -p ${PWD} -o ${PWD} --report-formats "json,JUnit" --output-name kics-result --ci --fail-on 'critical,high' --config ./kics-config.json
            displayName: KICS Scan
          - script: cat kics-result.json
            condition: succeededOrFailed()
            displayName: KICS Results
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit" # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
              testResultsFiles: "$(System.DefaultWorkingDirectory)/junit-kics-result.xml"

  # - stage: lintingAndFormatting
  #   displayName: Linting and Formatting Checks
  #   dependsOn: setup
  #   jobs:
  #     - job: LintAndFormat
  #       displayName: Run Linting and Formatting
  #       pool:
  #         vmImage: "ubuntu-latest"
  #       steps:
  #         - template: tools/install-pnpm.yml@pipeline-templates
  #         - script: |
  #             pnpm run check:linting
  #             pnpm run check:formatting
  #           displayName: "Run Linting and Formatting"

  - stage: checksCompleted
    displayName: Checks Completed
    dependsOn:
      # - lintingAndFormatting
      - securityScan
    jobs:
      - job: ChecksCompleted
        steps:
          - script: echo "All checks completed"

  - ${{ each service in parameters.services }}:
      - stage: Build_${{ replace(service.name, '-', '_') }}
        dependsOn: ChecksCompleted
        displayName: Build ${{ service.name }}
        pool:
          vmImage: ${{ parameters.vmImage }}
        jobs:
          - template: build/build_service.yml@pipeline-templates
            parameters:
              serviceName: ${{ service.name }}
              pushArtefacts: ${{ eq(variables.isDefaultBranch, 'true') }}
              buildArguments: --build-arg DEPLOY_ENV=${{ service.environment }}
              dockerfile: Dockerfile
  - ${{ each service in parameters.services }}:
      - stage: Push_${{ replace(service.name, '-', '_') }}
        displayName: Push ${{ service.name }} to ECR
        pool:
          vmImage: ${{ parameters.vmImage }}
        dependsOn:
          - Build_${{ replace(service.name, '-', '_') }}
        condition: and(${{ eq(variables.isDefaultBranch, 'true') }}, succeeded())
        jobs:
          - template: build/push_image_ecr.yml@pipeline-templates
            parameters:
              awsServiceConnection: ${{ variables.awsServiceConnection }}
              awsRegion: ${{ variables.awsRegion }}
              serviceName: ${{ service.name }}
              repositoryName: ${{ service.imageName }}
              pushTag: $(Build.BuildId)

  - ${{ if eq(variables.isDefaultBranch, 'true') }}:
      - ${{ each service in parameters.services }}:
          - stage: ApprovalGate_${{ service.environment }}
            dependsOn:
              - ${{ each service in parameters.services }}:
                  - Push_${{ replace(service.name, '-', '_') }}
            displayName: ${{ upper(service.environment) }} - Approval Gate
            jobs:
              - deployment: VerifyDeployment
                displayName: Verify conditions for deployment
                environment: design-system-${{ service.environment }}
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - download: none
                        - script: |
                            date
                          displayName: Show current date
          - stage: Deployment_${{ service.environment }}
            dependsOn:
              - ApprovalGate_${{ service.environment }}
            displayName: ${{ upper(service.environment) }} - Gitops Deployment
            jobs:
              - template: deploy/openshift-gitops.yml@pipeline-templates
                parameters:
                  manifestsRepositoryName: design-system-k8s-apps
                  tag: $(Build.BuildId)
                  services:
                    - ${{ each service in service.services }}:
                        - name: ${{ service.name }}
                          image: ${{ variables.awsEcrRepository }}/${{ service.imageName }}
                          overlaysPath: ${{ service.overlaysPath }}/${{ service.environment }}
