trigger:
  batch: true
  branches:
    include:
      - main
      - latest-release

pr:
  branches:
    exclude:
      - "*"

parameters:
  - name: vmImage
    type: string
    default: "ubuntu-24.04"
  - name: environments
    type: object
    default:
      - alias: development
        overlaysPath: websites/overlays/non-prod-02/dev
      - alias: production
        overlaysPath: websites/overlays/prod-02/prod
  - name: services
    type: object
    default:
      - name: "design-system-websites"
        imageName: "design-system-websites"

variables:
  - name: isDefaultBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  - template: pipeline-variables/shared-services.yaml

resources:
  repositories:
    - repository: pipeline-templates
      type: github
      endpoint: ogcio
      name: ogcio/building-blocks-pipelines
      ref: main
    - repository: design-system-k8s-apps
      type: github
      endpoint: ogcio
      name: ogcio/design-system-k8s-apps
      ref: main

stages:
  - stage: setup
    displayName: Setup Dependencies
    dependsOn: []
    jobs:
      - job: SetupDependencies
        displayName: Setup pnpm and Install Dependencies
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates

  - stage: securityScan
    displayName: Security Scans
    dependsOn: []
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - template: security/gitleaks.yml@pipeline-templates
      - job:
        displayName: Checkmarx KICS
        pool:
          vmImage: ${{ parameters.vmImage }}
        container: checkmarx/kics:debian
        steps:
          - script: /app/bin/kics scan -p ${PWD} -o ${PWD} --report-formats "json,JUnit" --output-name kics-result --ci --fail-on 'critical,high' --config ./kics-config.json
            displayName: KICS Scan
          - script: cat kics-result.json
            condition: succeededOrFailed()
            displayName: KICS Results
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit" # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
              testResultsFiles: "$(System.DefaultWorkingDirectory)/junit-kics-result.xml"

  - stage: lintingAndFormatting
    displayName: Linting and Formatting Checks
    dependsOn: setup
    jobs:
      - job: LintAndFormat
        displayName: Run Linting and Formatting
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run check:linting
              pnpm run format:check
            displayName: "Run Linting and Formatting"

  - stage: checksCompleted
    displayName: Checks Completed
    dependsOn:
      - lintingAndFormatting
      - securityScan
    jobs:
      - job: ChecksCompleted
        steps:
          - script: echo "All checks completed"

  - ${{ if eq(variables.isDefaultBranch, 'true') }}:
      - ${{ each environment in parameters.environments }}:
          - ${{ each service in parameters.services }}:
              - stage: Build_${{ replace(service.name, '-', '_') }}_${{ environment.alias }}
                dependsOn: ChecksCompleted
                displayName: Build ${{ service.name }} for ${{ environment.alias }}
                pool:
                  vmImage: ${{ parameters.vmImage }}
                jobs:
                  - template: build/build_service.yml@pipeline-templates
                    parameters:
                      serviceName: ${{ service.name }}
                      pushArtefacts: true
                      buildArguments: --build-arg DEPLOY_ENV=${{ environment.alias }}
                      dockerfile: Dockerfile

              # - stage: Scan_${{ replace(service.name, '-', '_') }}
              #   displayName: Scan ${{ service.name }}
              #   pool:
              #     vmImage: ${{ parameters.vmImage }}
              #   dependsOn:
              #     - Build_${{ replace(service.name, '-', '_') }}
              #   jobs:
              #     - template: security/trivy.yml@pipeline-templates
              #       parameters:
              #         pullDockerImageFromArtifact: true
              #         awsServiceConnection: ${{ variables.awsServiceConnection }}
              #         dockerImageName: ${{ service.name }}
              #         dockerImageTag: ${{ environment.alias }}_$(Build.BuildId)
              #         trivyIgnoreFilePath: .trivyignore

              - stage: Push_${{ replace(service.name, '-', '_') }}_${{ environment.alias }}
                displayName: Push ${{ service.name }} to ECR for ${{ environment.alias }}
                pool:
                  vmImage: ${{ parameters.vmImage }}
                dependsOn:
                  - Build_${{ replace(service.name, '-', '_') }}_${{ environment.alias }}
                condition: and(${{ eq(variables.isDefaultBranch, 'true') }}, succeeded())
                jobs:
                  - template: build/push_image_ecr.yml@pipeline-templates
                    parameters:
                      awsServiceConnection: ${{ variables.awsServiceConnection }}
                      awsRegion: ${{ variables.awsRegion }}
                      serviceName: ${{ service.name }}
                      repositoryName: ${{ service.imageName }}
                      pushTag: ${{ environment.alias }}_$(Build.BuildId)

          - stage: ApprovalGate_${{ environment.alias }}
            dependsOn:
              - checkTestCompleted
            displayName: ${{ upper(environment.alias) }} - Approval Gate
            jobs:
              - deployment: VerifyDeployment
                displayName: Verify conditions for deployment
                environment: design-system-${{ environment.alias }}
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - download: none
                        - script: |
                            date
                          displayName: Show current date

          - stage: Deployment_${{ environment.alias }}
            dependsOn:
              - ApprovalGate_${{ environment.alias }}
            displayName: ${{ upper(environment.alias) }} - Gitops Deployment
            jobs:
              - template: deploy/openshift-gitops.yml@pipeline-templates
                parameters:
                  manifestsRepositoryName: design-system-k8s-apps
                  tag: ${{ environment.alias }}_$(Build.BuildId)
                  services:
                    - ${{ each service in parameters.services }}:
                        - name: ${{ service.name }}
                          image: ${{ variables.awsEcrRepository }}/${{ service.imageName }}
                          overlaysPath: ${{ environment.overlaysPath }}

  - stage: Build_Libraries
    displayName: Build Libraries
    dependsOn: ChecksCompleted
    jobs:
      - job: BuildSdk
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run build:libs
            displayName: "Build Libraries"

  - stage: Test_React_Library
    displayName: Testing React Library
    dependsOn: Build_Libraries
    jobs:
      - job: RunTests
        displayName: Run Tests
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm exec playwright install chromium
              pnpm run build:libs
              pnpm run react:test
            displayName: "Run React Library Tests"
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(System.DefaultWorkingDirectory)/packages/react/ds/coverage/test-report.xml"
              testRunTitle: "DS React Library Tests Report"
              mergeTestResults: true
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/packages/react/ds/coverage/cobertura-coverage.xml
              artifactName: react.cobertura-coverage.xml

  - stage: Test_HTML_Library
    displayName: Testing HTML Library
    dependsOn: Build_Libraries
    jobs:
      - job: RunTests
        displayName: Run Tests
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm exec playwright install chromium
              pnpm run build:libs
              pnpm run html:test
            displayName: "Run HTML Library Tests"
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(System.DefaultWorkingDirectory)/packages/html/ds/coverage/test-report.xml"
              testRunTitle: "DS HTML Library Tests Report"
              mergeTestResults: true
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/packages/html/ds/coverage/cobertura-coverage.xml
              artifactName: html.cobertura-coverage.xml

  - stage: checkTestCompleted
    displayName: Check Build and Tests Completion
    dependsOn:
      - Test_React_Library
      - Test_HTML_Library
    jobs:
      - job: checkBuildSdkCompleted
        steps:
          - script: echo "All Build and Tests completed successfully"

  # Publish all tests coverage
  - stage: publishTestCoverage
    displayName: Publish Test Coverage
    condition: succeededOrFailed()
    dependsOn:
      - checkTestCompleted
    jobs:
      - job: PublishCoverage
        displayName: Publish Coverage Results
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              targetPath: $(Build.SourcesDirectory)/coverage
          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: "$(Build.SourcesDirectory)/coverage/**"

  - stage: retrieveCredentials
    displayName: Retrieve credentials from AWS Secrets Manager
    dependsOn: checkTestCompleted
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - job: readCredentials
        displayName: GitHub credentials
        steps:
          - checkout: none
          - task: AWSShellScript@1
            name: setGithubToken
            displayName: Retrieve GitHub credentials
            inputs:
              awsCredentials: ${{ variables.secretsManagerAwsConnection }}
              regionName: ${{ variables.awsRegion }}
              scriptType: "inline"
              inlineScript: |
                export GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.githubSecret }} | jq --raw-output '.SecretString' | jq -r .GITHUB_TOKEN)
                echo "##vso[task.setvariable variable=githubTokenADO;issecret=true;isoutput=true;]$GITHUB_TOKEN"
          - task: AWSShellScript@1
            name: setNPMjsToken
            displayName: Retrieve NPM credentials
            inputs:
              awsCredentials: ${{ variables.secretsManagerAwsConnection }}
              regionName: ${{ variables.awsRegion }}
              scriptType: "inline"
              inlineScript: |
                export TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.npmjsSecret }} | jq --raw-output '.SecretString' | jq -r .TOKEN)
                echo "##vso[task.setvariable variable=npmjsTokenADO;issecret=true;isoutput=true;]$TOKEN"

  - stage: releaseReactLibrary
    displayName: Release React Library
    dependsOn: retrieveCredentials
    jobs:
      - job: HandleRelease
        variables:
          - name: githubTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setGithubToken.githubTokenADO']]
          - name: npmjsTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setNPMjsToken.npmjsTokenADO']]
        displayName: Handle Release Process
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: release/release-please.yml@pipeline-templates
            parameters:
              npmToken: $(npmjsTokenADO)
              githubToken: $(githubTokenADO)
              repoUrl: "https://github.com/ogcio/govie-ds"
              packageName: "@ogcio/design-system-react"

  - stage: releaseHtmlLibrary
    displayName: Release HTML Library
    dependsOn: retrieveCredentials
    jobs:
      - job: HandleRelease
        variables:
          - name: githubTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setGithubToken.githubTokenADO']]
          - name: npmjsTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setNPMjsToken.npmjsTokenADO']]
        displayName: Handle Release Process
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: release/release-please.yml@pipeline-templates
            parameters:
              npmToken: $(npmjsTokenADO)
              githubToken: $(githubTokenADO)
              repoUrl: "https://github.com/ogcio/govie-ds"
              packageName: "@ogcio/design-system-html"

  - stage: releaseGovieThemeLibrary
    displayName: Release Theme GOV.IE Library
    dependsOn: retrieveCredentials
    jobs:
      - job: HandleRelease
        variables:
          - name: githubTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setGithubToken.githubTokenADO']]
          - name: npmjsTokenADO
            value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setNPMjsToken.npmjsTokenADO']]
        displayName: Handle Release Process
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: release/release-please.yml@pipeline-templates
            parameters:
              npmToken: $(npmjsTokenADO)
              githubToken: $(githubTokenADO)
              repoUrl: "https://github.com/ogcio/govie-ds"
              packageName: "@ogcio/theme-govie"
