trigger:
  batch: true
  branches:
    include:
      - main
      - latest-release

pr:
  branches:
    include:
      - main

parameters:
  - name: vmImage
    type: string
    default: "ubuntu-24.04"
  - name: services
    type: object
    default:
      - name: "design-system-websites"
        imageName: "design-system-websites"
  - name: autoReleaseCommitMessagePrefix
    default: "chore(auto-release):"

variables:
  - group: design-system
  - name: isDefaultBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  - template: pipeline-variables/shared-services.yaml
  - name: developmentOverlaysPath
    value: websites/overlays/non-prod-02/dev
  - name: productionOverlaysPath
    value: websites/overlays/prod-02/prod

resources:
  repositories:
    - repository: pipeline-templates
      type: github
      endpoint: ogcio
      name: ogcio/building-blocks-pipelines
      ref: main
    - repository: design-system-k8s-apps
      type: github
      endpoint: ogcio
      name: ogcio/design-system-k8s-apps
      ref: main

stages:
  - stage: setup
    displayName: Setup Dependencies
    dependsOn: []
    jobs:
      - job: SetupDependencies
        displayName: Setup pnpm and Install Dependencies
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates

  - stage: securityScan
    displayName: Security Scans
    dependsOn: []
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - template: security/gitleaks.yml@pipeline-templates
      - job:
        displayName: Checkmarx KICS
        pool:
          vmImage: ${{ parameters.vmImage }}
        container: checkmarx/kics:debian
        steps:
          - script: /app/bin/kics scan -p ${PWD} -o ${PWD} --report-formats "json,JUnit" --output-name kics-result --ci --fail-on 'critical,high' --config ./kics-config.json
            displayName: KICS Scan
          - script: cat kics-result.json
            condition: succeededOrFailed()
            displayName: KICS Results
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit" # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
              testResultsFiles: "$(System.DefaultWorkingDirectory)/junit-kics-result.xml"

  - stage: lintingAndFormatting
    displayName: Linting and Formatting Checks
    dependsOn: setup
    jobs:
      - job: LintAndFormat
        displayName: Run Linting and Formatting
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run format:check
            displayName: "Run Formatting Checks"
          - script: |
              pnpm run lint
            displayName: "Run Linting Checks"

  - stage: ChecksCompleted
    displayName: Checks Completed
    dependsOn:
      - lintingAndFormatting
      - securityScan
    jobs:
      - job: ChecksCompleted
        steps:
          - script: echo "All checks completed"
      - job: ReleaseStage
        steps:
          - task: Bash@3
            name: releaseVariables
            inputs:
              targetType: "inline"
              script: |
                COMMIT_MESSAGE=$(git log -1 --pretty=%B)

                if [[ $COMMIT_MESSAGE =~ ^"${{ parameters.autoReleaseCommitMessagePrefix }}" ]]; then
                  echo "Publishing status: true"
                  echo "##vso[task.setvariable variable=DEPLOY_ENV;isOutput=true]production"
                  echo "##vso[task.setvariable variable=OVERLAY_PATH;isOutput=true]${{ variables.productionOverlaysPath }}"
                  echo "##vso[task.setvariable variable=CD_ENV;isOutput=true]design-system-production"
                else
                  echo "Publishing status: false"
                  echo "##vso[task.setvariable variable=DEPLOY_ENV;isOutput=true]development"
                  echo "##vso[task.setvariable variable=OVERLAY_PATH;isOutput=true]${{ variables.developmentOverlaysPath }}"
                  echo "##vso[task.setvariable variable=CD_ENV;isOutput=true]design-system-development"
                fi

  - stage: testVariables
    dependsOn: ChecksCompleted
    jobs:
      - job: testVariables
        variables:
          deployEnv: $[stageDependencies.ChecksCompleted.ReleaseStage.outputs['releaseVariables.DEPLOY_ENV']]
          overlayPath: $[stageDependencies.ChecksCompleted.ReleaseStage.outputs['releaseVariables.OVERLAY_PATH']]
          cdEnv: $[stageDependencies.ChecksCompleted.ReleaseStage.outputs['releaseVariables.CD_ENV']]
        steps:
          - bash: |
              echo $(deployEnv)
              echo $(overlayPath)
              echo $(cdEnv)

  - ${{ if eq(variables.isDefaultBranch, 'true') }}:
      - ${{ each service in parameters.services }}:
          - stage: Build_${{ replace(service.name, '-', '_') }}
            dependsOn: ChecksCompleted
            displayName: Build ${{ service.name }}
            pool:
              vmImage: ${{ parameters.vmImage }}
            jobs:
              - job: BuildAndPush
                variables:
                  deployEnv: $[stageDependencies.ChecksCompleted.ReleaseStage.outputs['releaseVariables.DEPLOY_ENV']]
                steps:
                  - template: build/docker-image.yml@pipeline-templates
                    parameters:
                      serviceName: ${{ service.name }}
                      repositoryName: ${{ service.imageName }}
                      dockerFile: Dockerfile
                      buildContext: .
                      buildArgs: --build-arg DEPLOY_ENV=$(deployEnv)
                      tag: $(Build.BuildId)
                      awsCredentials: ${{ variables.awsServiceConnection }}

          - stage: Deployment
            dependsOn:
              - ChecksCompleted
              - checkTestCompleted
              - Build_${{ replace(service.name, '-', '_') }}
            displayName: Gitops Deployment
            variables:
              overlayPath: $[stageDependencies.ChecksCompleted.ReleaseStage.outputs['releaseVariables.OVERLAY_PATH']]
            jobs:
              - template: deploy/openshift-gitops.yml@pipeline-templates
                parameters:
                  manifestsRepositoryName: design-system-k8s-apps
                  tag: $(Build.BuildId)
                  services:
                    - name: ${{ service.name }}
                      image: ${{ variables.awsEcrRepository }}/${{ service.imageName }}
                      overlaysPath: $(overlayPath)

  - stage: Build_And_Test
    displayName: Build and Test Libraries
    dependsOn: ChecksCompleted
    jobs:
      - job: Build
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates
          - script: |
              pnpm run build
            displayName: "Build Libraries"

          - script: |
              pnpm exec playwright install chromium
              pnpm run test
            displayName: "Run Tests"
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(System.DefaultWorkingDirectory)/packages/react/ds/coverage/test-report.xml"
              testRunTitle: "DS React Library Tests Report"
              mergeTestResults: true
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/packages/react/ds/coverage/cobertura-coverage.xml
              artifactName: react.cobertura-coverage.xml

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(System.DefaultWorkingDirectory)/packages/html/ds/coverage/test-report.xml"
              testRunTitle: "DS HTML Library Tests Report"
              mergeTestResults: true
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/packages/html/ds/coverage/cobertura-coverage.xml
              artifactName: html.cobertura-coverage.xml

  - stage: checkTestCompleted
    displayName: Check Build and Tests Completion
    dependsOn: Build_And_Test
    jobs:
      - job: checkBuildSdkCompleted
        steps:
          - script: echo "All Build and Tests completed successfully"

  # Publish all tests coverage
  - stage: publishTestCoverage
    displayName: Publish Test Coverage
    condition: succeededOrFailed()
    dependsOn:
      - checkTestCompleted
    jobs:
      - job: PublishCoverage
        displayName: Publish Coverage Results
        pool:
          vmImage: ${{ parameters.vmImage }}
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              targetPath: $(Build.SourcesDirectory)/coverage
          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: "$(Build.SourcesDirectory)/coverage/**"

  - ${{ if eq(variables.isDefaultBranch, 'true') }}:
      - stage: retrieveCredentials
        displayName: Retrieve credentials from AWS Secrets Manager
        dependsOn: checkTestCompleted
        pool:
          vmImage: ${{ parameters.vmImage }}
        jobs:
          - job: readCredentials
            displayName: GitHub credentials
            steps:
              - checkout: none
              - task: AWSShellScript@1
                name: setGithubToken
                displayName: Retrieve GitHub credentials
                inputs:
                  awsCredentials: ${{ variables.secretsManagerAwsConnection }}
                  regionName: ${{ variables.awsRegion }}
                  scriptType: "inline"
                  inlineScript: |
                    export GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.githubSecret }} | jq --raw-output '.SecretString' | jq -r .GITHUB_TOKEN)
                    echo "##vso[task.setvariable variable=githubTokenADO;issecret=true;isoutput=true;]$GITHUB_TOKEN"
              - task: AWSShellScript@1
                name: setNPMjsToken
                displayName: Retrieve NPM credentials
                inputs:
                  awsCredentials: ${{ variables.secretsManagerAwsConnection }}
                  regionName: ${{ variables.awsRegion }}
                  scriptType: "inline"
                  inlineScript: |
                    export TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.npmjsSecret }} | jq --raw-output '.SecretString' | jq -r .TOKEN)
                    echo "##vso[task.setvariable variable=npmjsTokenADO;issecret=true;isoutput=true;]$TOKEN"

      - stage: releaseLibraries
        displayName: Release Libraries
        dependsOn: retrieveCredentials
        jobs:
          - job: HandleRelease
            variables:
              - name: githubTokenADO
                value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setGithubToken.githubTokenADO']]
              - name: npmjsTokenADO
                value: $[stageDependencies.retrieveCredentials.readCredentials.outputs['setNPMjsToken.npmjsTokenADO']]
            displayName: Handle Release Process
            pool:
              vmImage: ${{ parameters.vmImage }}
            steps:
              - template: tools/install-pnpm.yml@pipeline-templates

              - task: Bash@3
                name: setReleaseVariables
                inputs:
                  targetType: "inline"
                  script: |
                    COMMIT_MESSAGE=$(git log -1 --pretty=%B)
                    echo "Commit Message: $COMMIT_MESSAGE"
                    echo "##vso[task.setvariable variable=COMMIT_MESSAGE;isOutput=true]$COMMIT_MESSAGE"

                    if [[ $COMMIT_MESSAGE =~ ^"${{ parameters.autoReleaseCommitMessagePrefix }}" ]]; then
                      echo "Publishing status: true"
                      echo "##vso[task.setvariable variable=PUBLISH_PLEASE;isOutput=true]true"
                    else
                      echo "Publishing status: false"
                      echo "##vso[task.setvariable variable=PUBLISH_PLEASE;isOutput=true]false"
                    fi
                env:
                  GITHUB_TOKEN: $(githubTokenADO)

              # Create/Update the Release PR if on main branch and PUBLISH_PLEASE is "false"
              - task: Bash@3
                name: createReleasePR
                condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['setReleaseVariables.PUBLISH_PLEASE'], 'false'))
                inputs:
                  targetType: "inline"
                  script: |
                    if [ -z "$GITHUB_TOKEN" ]; then
                      echo "GITHUB_TOKEN is not set. Please set the GITHUB_TOKEN environment variable."
                      exit 1
                    fi

                    echo "Creating/Updating release pull request"
                    if ! npx release-please release-pr \
                      --token="$GITHUB_TOKEN" \
                      --repo-url="https://github.com/ogcio/govie-ds"; then
                      echo "Error: Failed to create/update release pull request. Check the GITHUB_TOKEN and repoUrl."
                      exit 1
                    fi
                env:
                  GITHUB_TOKEN: $(githubTokenADO)

              # Publish package only if on main branch and PUBLISH_PLEASE is true
              - task: Bash@3
                name: publishPackages
                condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['setReleaseVariables.PUBLISH_PLEASE'], 'true'))
                inputs:
                  targetType: "inline"
                  script: |
                    if [ -z "$NPM_TOKEN" ]; then
                      echo "NPM_TOKEN is not set. Please set the NPM_TOKEN environment variable."
                      exit 1
                    fi
                    if [ -z "$GITHUB_TOKEN" ]; then
                      echo "GITHUB_TOKEN is not set. Please set the GITHUB_TOKEN environment variable."
                      exit 1
                    fi

                    echo "Creating GitHub release..."
                    if ! npx release-please github-release \
                      --token="$GITHUB_TOKEN" \
                      --repo-url="https://github.com/ogcio/govie-ds"; then
                      echo "Error: Failed to create GitHub release. Check the GITHUB_TOKEN and repoUrl."
                      exit 1
                    fi

                    npm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"

                    pnpm run build:libs

                    echo "Publishing "@ogcio/design-system-react"..."
                    if ! pnpm --filter "@ogcio/design-system-react" publish --no-git-checks --access public; then
                      echo "Error: Failed to publish "@ogcio/design-system-react"."
                    fi

                    echo "Publishing "@ogcio/theme-govie"..."
                    if ! pnpm --filter "@ogcio/theme-govie" publish --no-git-checks --access public; then
                      echo "Error: Failed to publish "@ogcio/theme-govie"."
                    fi

                    pnpm run dist

                    HTML_TAG=$(gh release list --json tagName --jq 'first(.[].tagName | select(contains("html-lib")))')
                    gh release upload $HTML_TAG ./packages/html/ds/govie-frontend.zip

                    THEME_TAG=$(gh release list --json tagName --jq 'first(.[].tagName | select(contains("themes-govie")))')
                    gh release upload $THEME_TAG ./packages/themes/govie/theme.zip
                env:
                  NPM_TOKEN: $(npmjsTokenADO)
                  GITHUB_TOKEN: $(githubTokenADO)

      - stage: azureDevopsUpdate
        displayName: Azure DevOps Wiki Update
        dependsOn: releaseLibraries
        jobs:
          - job: UpdateAzureDevops
            displayName: Update Azure DevOps Wiki with Tickets
            pool:
              vmImage: ${{ parameters.vmImage }}
            steps:
              - checkout: self
                persistCredentials: true
                displayName: Checkout code

              - task: Bash@3
                name: setReleaseVariables
                inputs:
                  targetType: "inline"
                  script: |
                    COMMIT_MESSAGE=$(git log -1 --pretty=%B)

                    if [[ $COMMIT_MESSAGE =~ ^"${{ parameters.autoReleaseCommitMessagePrefix }}" ]]; then
                      echo "##vso[task.setvariable variable=PUBLISH_PLEASE;isOutput=true]true"
                    else
                      echo "##vso[task.setvariable variable=PUBLISH_PLEASE;isOutput=true]false"
                    fi

              - bash: |
                  set -euo pipefail

                  current_date=$(date +"%Y-%m-%d")
                  release_page_path="/Release%20Notes/Design%20System/$current_date"
                  project_wiki_base_url="$AZURE_DEVOPS_BASE_URL/Digital%20Services%20Programme/_apis/wiki/wikis/Digital-Services-Programme.wiki"
                  existing_release_page_http_code=$(curl --output /dev/null --silent --write-out "%{http_code}\n" --request GET --location "$project_wiki_base_url/pages?path=$release_page_path&api-version=7.2-preview.1" --header 'Accept: application/json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN")

                  template_wiki_page_content=''
                  if [ "$existing_release_page_http_code" -eq 404 ]; then
                    echo 'Fetching release notes template page...'
                    template_wiki_page_content=$(curl --silent --request GET --location "$project_wiki_base_url/pages/4136?includeContent=true&api-version=7.2-preview.1" --header 'Accept: application/json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" | jq '.content')
                  else
                    echo 'Fetching existing release notes page...'
                    template_wiki_page_content=$(curl --silent --request GET --location "$project_wiki_base_url/pages?path=$release_page_path&includeContent=true&api-version=7.2-preview.1" --header 'Accept: application/json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" | jq '.content')
                  fi

                  echo 'Extracting tickets list...'
                  release_tickets_list=$(git log latest-release..HEAD --oneline | grep -o -E '[Aa][Bb]#[0-9]+' | sed 's/[Aa][Bb]#/- #/' | sort | uniq)

                  echo 'Extracted tickets:'
                  echo "$release_tickets_list"

                  echo 'Deleting existing Wiki page...'
                  delete_release_page_http_code=$(curl --request DELETE --output /dev/null --silent --write-out "%{http_code}\n" --location "$project_wiki_base_url/pages?path=$release_page_path&api-version=7.2-preview.1" --header 'Accept: application/json' --header 'Content-Type: application/json'  --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN")

                  echo 'Creating release notes Wiki page...'

                  release_tickets_list="${release_tickets_list//$'\n'/\\n}"
                  release_wiki_page_content=${template_wiki_page_content//'[app_tickets_list_placeholder]'/$release_tickets_list}

                  release_page_update_response=$(curl --silent --request PUT --location "$project_wiki_base_url/pages?path=$release_page_path&api-version=7.2-preview.1" --header 'Accept: application/json' --header 'Content-Type: application/json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" --data "{\"content\":$release_wiki_page_content}" | jq)
                  release_page_url=$(echo "$release_page_update_response" | jq -r '.remoteUrl')
                  echo "Release notes Wiki page URL: $release_page_url"
                displayName: Create Wiki Page
                condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['setReleaseVariables.PUBLISH_PLEASE'], 'true'))
                env:
                  AZURE_DEVOPS_API_USERNAME: $(ADO_API_USERNAME)
                  AZURE_DEVOPS_API_TOKEN: $(ADO_API_TOKEN)
                  AZURE_DEVOPS_BASE_URL: $(ADO_BASE_URL)

              - bash: |
                  set -euo pipefail

                  AZURE_DEVOPS_TICKETS_AREA_PATH='Digital Services Programme\\Design System'
                  AZURE_DEVOPS_TICKETS_READY_TO_RELEASE_STATE='Ready to Release'
                  AZURE_DEVOPS_TICKETS_READY_TO_CLOSED_STATE='Closed'

                  ready_to_release_tickets_query="SELECT [System.Id] FROM workitems WHERE [System.AreaPath] = '$AZURE_DEVOPS_TICKETS_AREA_PATH' AND [System.State] = '$AZURE_DEVOPS_TICKETS_READY_TO_RELEASE_STATE'"
                  ready_to_release_tickets_query_payload="{\"query\":\"$ready_to_release_tickets_query\"}"
                  ready_to_release_tickets_ids=$(curl --silent --request POST --location "$AZURE_DEVOPS_BASE_URL/_apis/wit/wiql?api-version=7.2-preview.2" --header 'Accept: application/json' --header 'Content-Type: application/json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" --data "$ready_to_release_tickets_query_payload" | jq -r '.workItems | map(.id) | join(",")')
                  IFS=',' read -ra ready_to_release_tickets_ids_array <<< "$ready_to_release_tickets_ids"

                  current_date=$(date +"%Y-%m-%d")

                  for ticket_id in "${ready_to_release_tickets_ids_array[@]}"
                  do
                      echo "Moving ticket with ID $ticket_id from $AZURE_DEVOPS_TICKETS_READY_TO_RELEASE_STATE to $AZURE_DEVOPS_TICKETS_READY_TO_CLOSED_STATE"
                      update_ticket_payload="[{\"op\": \"add\",\"path\": \"/fields/System.State\",\"value\": \"$AZURE_DEVOPS_TICKETS_READY_TO_CLOSED_STATE\"},{\"op\": \"add\",\"path\": \"/fields/System.Reason\",\"value\": \"Released to PROD on $current_date\"}]"
                      curl --silent --request PATCH --location "$AZURE_DEVOPS_BASE_URL/Digital%20Services%20Programme/_apis/wit/workitems/${ticket_id}?api-version=7.2-preview.3" --header 'Accept: application/json' --header 'Content-Type: application/json-patch+json' --user "$AZURE_DEVOPS_API_USERNAME:$AZURE_DEVOPS_API_TOKEN" --data "$update_ticket_payload"
                      echo ''
                      echo '---------------------------'
                  done
                condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['setReleaseVariables.PUBLISH_PLEASE'], 'true'))
                displayName: Close released tickets
                env:
                  AZURE_DEVOPS_API_USERNAME: $(ADO_API_USERNAME)
                  AZURE_DEVOPS_API_TOKEN: $(ADO_API_TOKEN)
                  AZURE_DEVOPS_BASE_URL: $(ADO_BASE_URL)

              - bash: |
                  git tag -d latest-release
                  git push origin :refs/tags/latest-release
                  git tag latest-release
                  git push origin latest-release
                condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['setReleaseVariables.PUBLISH_PLEASE'], 'true'))
                displayName: Move latest-release tag to current commit

  - stage: Chromatic_HTML
    displayName: Chromatic for HTML Library
    dependsOn: checkTestCompleted
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - job: Chromatic_Deploy
        displayName: "Build and Upload Chromatic"
        steps:
          - checkout: self
            displayName: "Get Full Git History"
            fetchDepth: 0

          - template: tools/install-pnpm.yml@pipeline-templates

          - script: |
              pnpm build:libs
              pnpm html:storybook:build
            displayName: "Build Storybook for HTML Library"

          - task: CmdLine@2
            displayName: "Run Chromatic"
            inputs:
              script: npx chromatic --config-file packages/html/ds/chromatic.config.json
            env:
              CHROMATIC_PROJECT_TOKEN: $(CHROMATIC_PROJECT_TOKEN_HTML)

  - stage: Chromatic_React
    displayName: Chromatic for React Library
    dependsOn: checkTestCompleted
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - job: Chromatic_Deploy
        displayName: "Build and Upload Chromatic"
        steps:
          - checkout: self
            displayName: "Get Full Git History"
            fetchDepth: 0

          - template: tools/install-pnpm.yml@pipeline-templates

          - script: |
              pnpm build:libs
              pnpm react:storybook:build
            displayName: "Build Storybook for React Library"

          - task: CmdLine@2
            displayName: "Run Chromatic"
            inputs:
              script: npx chromatic --config-file packages/react/ds/chromatic.config.json
            env:
              CHROMATIC_PROJECT_TOKEN: $(CHROMATIC_PROJECT_TOKEN_REACT)
