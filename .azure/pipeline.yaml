trigger:
  batch: true
  branches:
    include:
      - main
      - latest-release

pr:
  branches:
    exclude:
      - "*"

variables:
  - template: pipeline-variables/shared-services.yaml
  - template: pipeline-variables/${{ coalesce(variables['Build.SourceBranchName'], 'main') }}.yaml

resources:
  repositories:
    - repository: pipeline-templates
      type: github
      endpoint: ogcio
      name: ogcio/building-blocks-pipelines
      ref: main
    - repository: design-system-k8s-apps
      type: github
      endpoint: ogcio
      name: ogcio/design-system-k8s-apps
      ref: main

stages:
  - stage: setup
    displayName: Setup Dependencies
    dependsOn: []
    jobs:
      - job: SetupDependencies
        displayName: Setup pnpm and Install Dependencies
        pool:
          vmImage: "ubuntu-22.04"
        steps:
          - template: tools/install-pnpm.yml@pipeline-templates

  - stage: securityScan
    displayName: Security Scans
    dependsOn: []
    pool:
      vmImage: "ubuntu-22.04"
    jobs:
      - template: security/gitleaks.yml@pipeline-templates
      - job:
        displayName: Checkmarx KICS
        pool:
          vmImage: "ubuntu-22.04"
        container: checkmarx/kics:debian
        steps:
          - script: /app/bin/kics scan -p ${PWD} -o ${PWD} --report-formats "json,JUnit" --output-name kics-result --ci --fail-on 'critical,high' --config ./kics-config.json
            displayName: KICS Scan
          - script: cat kics-result.json
            condition: succeededOrFailed()
            displayName: KICS Results
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit" # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
              testResultsFiles: "$(System.DefaultWorkingDirectory)/junit-kics-result.xml"

  # - stage: lintingAndFormatting
  #   displayName: Linting and Formatting Checks
  #   dependsOn: setup
  #   jobs:
  #     - job: LintAndFormat
  #       displayName: Run Linting and Formatting
  #       pool:
  #         vmImage: "ubuntu-22.04"
  #       steps:
  #         - template: tools/install-pnpm.yml@pipeline-templates
  #         - script: |
  #             pnpm run check:linting
  #             pnpm run check:formatting
  #           displayName: "Run Linting and Formatting"

  - stage: checksCompleted
    displayName: Checks Completed
    dependsOn:
      # - lintingAndFormatting
      - securityScan
    jobs:
      - job: ChecksCompleted
        steps:
          - script: echo "All checks completed"

  - stage: Build_${{ replace(variables.name, '-', '_') }}
    dependsOn: ChecksCompleted
    displayName: Build ${{ variables.name }}
    pool:
      vmImage: "ubuntu-22.04"
    jobs:
      - template: build/build_service.yml@pipeline-templates
        parameters:
          serviceName: ${{ variables.name }}
          pushArtefacts: true
          buildArguments: --build-arg DEPLOY_ENV=${{ variables.environment }}
          dockerfile: Dockerfile

  - stage: Push_${{ replace(variables.name, '-', '_') }}
    displayName: Push ${{ variables.name }} to ECR
    pool:
      vmImage: "ubuntu-22.04"
    dependsOn:
      - Build_${{ replace(variables.name, '-', '_') }}
    condition: succeeded()
    jobs:
      - template: build/push_image_ecr.yml@pipeline-templates
        parameters:
          awsServiceConnection: ${{ variables.awsServiceConnection }}
          awsRegion: ${{ variables.awsRegion }}
          serviceName: ${{ variables.name }}
          repositoryName: ${{ variables.imageName }}
          pushTag: $(Build.BuildId)

  - stage: ApprovalGate_${{ variables.environment }}
    dependsOn:
      - Push_${{ replace(variables.name, '-', '_') }}
    displayName: ${{ upper(variables.environment) }} - Approval Gate
    jobs:
      - deployment: VerifyDeployment
        displayName: Verify conditions for deployment
        environment: design-system-${{ variables.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - script: |
                    date
                  displayName: Show current date

  - stage: Deployment_${{ variables.environment }}
    dependsOn:
      - ApprovalGate_${{ variables.environment }}
    displayName: ${{ upper(variables.environment) }} - Gitops Deployment
    jobs:
      - template: deploy/openshift-gitops.yml@pipeline-templates
        parameters:
          manifestsRepositoryName: design-system-k8s-apps
          tag: $(Build.BuildId)
          services:
            - name: ${{ variables.name }}
              image: ${{ variables.awsEcrRepository }}/${{ variables.imageName }}
              overlaysPath: ${{ variables.overlaysPath }}
